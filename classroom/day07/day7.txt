the buffer value is collected by char when we press enter if we having any buffer value.
To avoid this we need to put char at top.
or use fflush(stdin) before using this but it wont work in linux.
we can use if statements as debugger or error handling to see if the statement is executing.
scanf initally checks temporary buffer if no it take input fron user to avoid that use scanf() before.
as scanf(" ") in only work for single character
"HOW TO AVOID NUMERIC CONSTANTS USING SCANF"
"SCAN THE EMPLOYEE RECORD AND PRINT THEM IN PARTICULAR FORMAT ID,NAME,GENDER,ADDRESS,PHONE NUMBER,SALARY,DESIGNATION 
SlNO | ID | NAME | GENDER | ADDRESS | PHNO | SALARY | DESG
001  | 101| Bhima| M      | Kar     | 8888 | 10000  | SE
"ERROR"
stack smashing detected(aborted) core dumped. This occurs to clean the memory when we use outofbounds.
Base addresses of variables(these may change):
i=472
f=476
c=471
str=488
d=480
" %d"-ok only if %d is integer, if it is character it will take space also as input character.
we can use sprintf to convert int to string. atoi to convert string to integer has in lib.h file(atoi(value)). 
in real time you must use "%d%d". no \t or \n in scanf. like avoiding unprintable characters.
unformatted are getc(didected) fgetc, putc read and write single charactor from stream.
getchar,putchar read and write single character from std i/o.
gets,puts stirng