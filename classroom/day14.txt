Concurrency in programming:
1.Multithreading: shares a same memory space results to race condition  then requires synchronization.
Race condtion: when sis and bro bank example like both are doing things in same time result will be unpredictable.
2.Multiprocessing: each process has own memory space
3.Asynchronous programming
Process = process context+code,data,stack
Each thread as its own TID.
Thread and process
1.Each has its own logical control flow
2.Each can run concurrently
3.Each is context switched
Threads share same code but process not
Threads are less expensive
To avoid reace condition with pthread_mutex_init, pthread_mutex_[un]lock
function arguments must be of void * type(typecast)
clock_fettime(CLOCK_MONOTONIC,&start); to calculate time taken

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>

typedef unsigned long long ULL;

ULL sumOdd = 0;
ULL sumEven = 0;

void findEven(ULL, ULL);
void findOdd(void **);

int main()
{
    ULL start = 0, end = 1900000000;
    ULL vargs[2] = {0,1900000000};
    pthread_t tid1,tid2;

    pthread_create(&tid1, NULL, findOdd,(void *)vargs);

    printf("\nSum Even = %llu",sumEven);
    printf("\nSum Odd = %llu", sumOdd);

    pthread_exit(NULL);


}

void findOdd(void *vargs[])
{
    ULL i;
    printf("\ns=%llu",vargs[0]);
    printf("\ne=%llu",vargs[1]);
    for(i = (int)vargs[0];i<=(int)vargs[1];i++)
    {
        if((i & 1) == 1)
        {
            sumOdd += i;
            // sleep(1);
        }

    }
void findEven(ULL start, ULL end)
{
    ULL i;
    for(i=start;i<=end;i++)
    {
        if((i & 1) == 0)
        {
            sumEven += i;
            // sleep(1);
        }
    }
}
