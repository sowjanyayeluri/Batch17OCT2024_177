splint project: in multithreading who is producer and consumer
what consumer has to do if producer stops writing, is consumer need to wait.
questions on circular queue and priority queue in l1 and splint project.
1.Linear search
it can be used for any unsorted item
2.interval/binary search
divide and search rule
if number of inout is not know what to do:
use linked list use argc and malloc
3.time and space complexity
4.sorting techniques:
two  types:
1.space used-
2.stability-insertion sort is stable and quoick sort is unstable
1.bubble sort:
ASSIGNMENT:
WAP to merge to arrays or lists to for a sorted list.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int binarySearch(int *,int,int);
int main(int argc, char *argv[])
{   if(argc<3)
    {
        printf("No");
        return 1;
    }
    int *b=NULL;
    int *temp=NULL;
    int len=argc-2;

    b=(int *)malloc(len*sizeof(int));
    temp=b;
    for(int i=0;i<len;i++)
    {
        b=atoi(argv[i+1]);
        b++;
    }
    /*int arr[5]={1,2,3,4,5};
    int key;
    scanf("%d",&key);
    */
    b=temp;
    int high=n;
    int low=0;
    int key=atoi(argv[argc-1]);
    int result=binarySearch(b,low,high,key);
    if(result>0)
        printf("\nat index: %d\n",result);
    return 0;
}
int binarySearch(int *arr,int low,int high,int key)
{
    int flag;
    int mid;
    while(low<=high)
    {
        mid=(low+high)/2;
        if(arr[mid]==key)
        {
            flag=1;
            break;
        }
        else if(arr[mid]>key)
            binarySearch(arr,low,mid-1,key);
        else
            binarySearch(arr,mid+1,high,key);
    }
    if(flag==1)
        return mid;
    else
        printf("not found");
        return -1;
}


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void bubbleSort(int *,int);
void swap(int *,int *);
int main(int argc, char *argv[])
{
    int *temp=NULL;
    if(argc<2)
    {
        printf("No");
        return 1;
    }
    int *b=NULL;
    int len=argc-1;
    b=(int *)malloc(len*sizeof(int));
    temp=b;
    for(int i=0;i<len;i++)
    {
        *b=atoi(argv[i+1]);
        b++;
    }
    /*int arr[5]={1,2,3,4,5};
    int key;
    scanf("%d",&key);
    */
    b=temp;
    bubbleSort(b,len);
    for(int i=0;i<len;i++)
    {
        printf("\n%d ",b[i]);
    }
    return 0;
}
void bubbleSort(int *arr,int n)
{
    int i,j,temp;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n-i;j++)
        {
            if(arr[j]>arr[j+1])
            {
                swap(&arr[j],&arr[j+1]);
            }

        }

    }
}
void swap(int *num1,int *num2)
{
    int temp=*num1;
    *num1=*num2;
    *num2=temp;
}


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void selectionSort(int *,int);
void swap(int *,int *);
int main(int argc, char *argv[])
{
    if(argc<2)
    {
        printf("No");
        return 1;
    }
    int *b=NULL;
    int len=argc-1;
    b=(int *)malloc(len*sizeof(int));
    for(int i=0;i<len;i++)
    {
        b[i]=atoi(argv[i+1]);
    }
    /*int arr[5]={1,2,3,4,5};
    int key;
    scanf("%d",&key);
    */

    selectionSort(b,len);
    for(int i=0;i<len;i++)
    {
        printf("\n%d ",b[i]);
    }
    return 0;
}
void selectionSort(int *arr,int n)
{
    int i,j,temp,mid;
    int flag;
    for(i=0;i<n;i++)
    {
        mid=i;
        flag=0;
        for(j=i+1;j<n;j++)
        {
            if(arr[mid]>arr[j])
            {
                mid=j;
                flag=1;
            }
        }
        if(flag==1)
        swap(&arr[i],&arr[mid]);
    }
}
void swap(int *num1,int *num2)
{
    int temp=*num1;
    *num1=*num2;
    *num2=temp;
}
