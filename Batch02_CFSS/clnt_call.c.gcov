        -:    0:Source:src/clnt_call.c
        -:    0:Graph:obj/clnt_call.gcno
        -:    0:Data:obj/clnt_call.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/************************************************************************* 
        -:    2:*
        -:    3:*  FILE NAME    : clnt_call.c
        -:    4:*
        -:    5:*  DESCRIPTION  : Contains functions to handle client-side operations
        -:    6:*                 like user registration, login, and call forwarding.
        -:    7:*
        -:    8:*  DATE          NAME
        -:    9:*
        -:   10:*  10-DEC-24    Batch02
        -:   11:*
        -:   12:**************************************************************************/
        -:   13:
        -:   14:
        -:   15:/*****************************************************************************
        -:   16:*                       Header Files
        -:   17:******************************************************************************/
        -:   18:
        -:   19:#include <common.h>
        -:   20:#include <clnt_call.h>
        -:   21:
        -:   22:/****************************************************************************
        -:   23:*       Function Name   : client
        -:   24:*       Description     : Creates a client, connects to a server, presents 
        -:   25:*                       a menu for user interaction (register, login, etc.), 
        -:   26:*						takes input from user and then sends the data to the server.
        -:   27:*       Returns         : returns 0 on success, 1 on failure (socket/connection error)
        -:   28:****************************************************************************/
        -:   29:
        2:   30:int client(char *argv[]) {
        -:   31:
        2:   32:    int port_no=0,sock=0,option=0;
        -:   33:
        -:   34:	/*ip_addr: A character array that stores the server's IP addres*/
        2:   35:    char ip_addr[strlen(argv[2])];
        -:   36:
        -:   37:	/* Extract port number and IP address from arguments */
        2:   38:    port_no = atoi(argv[1]);
        2:   39:    strcpy(ip_addr,argv[2]);
        -:   40:	
        -:   41:	/* server_addr: Struct to store server address (IP, port, etc.) */
        -:   42:    struct sockaddr_in server_addr;
        -:   43:
        -:   44:    /* Create socket with IPv4 and TCP protocol */
        2:   45:    sock = socket(AF_INET, SOCK_STREAM, 0);
        2:   46:    if (sock < 0) {
    #####:   47:        perror("Socket creation failed");
    #####:   48:        return FAILURE;
        -:   49:    }
        -:   50:	
        -:   51:	/* Initialize the server_addr structure to zero*/
        2:   52:    memset(&server_addr, 0, sizeof(server_addr));
        2:   53:    server_addr.sin_family = AF_INET;
        2:   54:    server_addr.sin_port = htons(port_no);
        2:   55:    server_addr.sin_addr.s_addr = inet_addr(ip_addr);
        -:   56:
        -:   57:    /* Connect to server using the address stored in server_addr*/
        2:   58:    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
    #####:   59:        perror("Connection failed");
    #####:   60:        close(sock);
    #####:   61:        return FAILURE;
        -:   62:    }
        -:   63:    
        -:   64:	/* Display the main menu for user to choose an option */
        2:   65:	printf("=============== MAIN MENU ===============");
        2:   66:	printf("\n1. Register\n2. Login\n3. Forward call\n0. Exit\n");
        2:   67:	printf("Enter the choice: ");
        -:   68:
        -:   69:	/* Get user choice and send it to the server */
        2:   70:    scanf("%d", &option);
        2:   71:    getchar();
        2:   72:    send(sock, &option, sizeof(option), 0);
        -:   73:
        -:   74:	/* Process the option chosen by the user */
        2:   75:    main_menu(sock, option);
        -:   76:
        -:   77:	/* Close the socket after interaction */
        2:   78:    close(sock);
        2:   79:    return SUCCESS;
        -:   80:}
        -:   81:
        -:   82:/****************************************************************************
        -:   83:*       Function Name   : main_menu
        -:   84:*       Description     : Executes actions based on user menu choice (register, 
        -:   85:*                         login, forward call, etc.).
        -:   86:*       Returns         : Nothing.
        -:   87:****************************************************************************/
        -:   88:
        -:   89:
        2:   90:void main_menu(int sock, int option)
        -:   91:{
        -:   92:	/* Switch case to handle user choice from the menu */
        2:   93:    switch(option)
        -:   94:    {
        2:   95:        case 1:
        2:   96:            regist(sock);	/* Call the registration function */
        2:   97:            edit_menu(sock);	/* Edit menu after registration */
        2:   98:            break;
    #####:   99:        case 2:
    #####:  100:            login(sock);	/* Call the login function */
    #####:  101:            edit_menu(sock);	/* Edit menu after login */
    #####:  102:            break;
    #####:  103:        case 3:
    #####:  104:            forward_call(sock);	   /* Call the forward call function */
    #####:  105:            break;
    #####:  106:		case 0:
    #####:  107:			break;	/* Exit if option is 0 */
    #####:  108:        default:
    #####:  109:            printf("\nInvalid option\n");	/* Handle invalid menu option */
    #####:  110:			break;
        -:  111:    }
        2:  112:}
        -:  113:
        -:  114:/****************************************************************************
        -:  115:*       Function Name   : regist
        -:  116:*       Description     : Manages user registration, validates input, and 
        -:  117:*                         communicates with the server.
        -:  118:*       Returns         : Nothing.
        -:  119:****************************************************************************/
        -:  120:
        2:  121:void regist(int sock)
        -:  122:{
        2:  123:	int attempts=0;	  /*For number of failed registration attempts*/
        2:  124:	printf("\n============ REGISTRATION PAGE ===============\n");
        2:  125:	printf("Start registering\n");
        -:  126:    while(1)
        -:  127:    {
        2:  128:		if(attempts<3)	  /* Allow up to 3 failed attempts */
        -:  129:		{
        2:  130:			printf("Enter the usernumber: ");
        2:  131:        	if(scanf("%ld", &phno) == 1)	/* Input user number (phone number) */
        -:  132:        	{
        2:  133:            	getchar();
        -:  134:			
        -:  135:				/* Validate if phone number is a 10-digit long number */
        2:  136:            	if(phno >= 1000000000 && phno <= 9999999999)
        -:  137:            	{
        2:  138:                	send(sock, &phno, sizeof(phno), 0);	  /* Send phone number to the server */
        2:  139:                	break;	/* Exit loop if valid phone number is entered */
        -:  140:            	}
        -:  141:            	else
        -:  142:            	{
    #####:  143:					attempts++;	  /* Increment attempts on invalid phone number */
    #####:  144:                	printf("\nEnter 10 digits\n");
        -:  145:            	}
        -:  146:        	}
        -:  147:        	else
        -:  148:        	{
    #####:  149:				attempts++;	 /* Increment attempts on non-numeric input */
    #####:  150:            	printf("\nEnter only long integers\n");
    #####:  151:            	getchar();
        -:  152:        	}
        -:  153:		}
        -:  154:		else
        -:  155:		{
    #####:  156:			printf("Maximum limit exceeded.\nTry again later.\n");	  /* Exit after 3 failed attempts */
    #####:  157:			exit(EXIT_FAILURE);
        -:  158:		}
        -:  159:    }
        -:  160:
        -:  161:	/* Reset attempts counter and receive server response */
        2:  162:	attempts=0;
        2:  163:    recv(sock, buffer, sizeof(buffer), 0);
        -:  164:
        -:  165:	/* Check if user number is already registered */
        2:  166:    if(strcmp(buffer, "Usernumber already taken.\nPlease log in.\n") == 0)
        -:  167:    {
        1:  168:        login(sock);	/* Redirect to login if user number is already taken */
        1:  169:        return;
        -:  170:    }
        -:  171:
        -:  172:	/* Check if the server asks for password */
        1:  173:    if (strcmp(buffer, "Enter password: ") == 0)
        -:  174:    {
        -:  175:        while(1)
        -:  176:        {
        1:  177:			if(attempts<3)	  /* Allow up to 3 failed password attempts */
        -:  178:			{
        1:  179:            	printf("%s", buffer);
        1:  180:           	 	fgets(password, MAXBUFF, stdin);
        1:  181:            	password[strlen(password)-1] = '\0';
        1:  182:            	send(sock, password, sizeof(password), 0);	 /* Send password to server */
        1:  183:           	 	printf("Enter confirm password: ");
        1:  184:            	fgets(conf_password, MAXBUFF, stdin);
        1:  185:            	conf_password[strlen(conf_password) - 1] = '\0';
        1:  186:            	send(sock, conf_password, sizeof(conf_password), 0);	/* Send confirm password */
        -:  187:
        -:  188:				/* Receive server response */
        1:  189:            	recv(sock, buffer, sizeof(buffer), 0);
        1:  190:            	if (strcmp(buffer, "Registration successful\n") == 0)
        -:  191:            	{
        1:  192:                	break;	  /* Exit loop on successful registration */
        -:  193:            	}
        -:  194:            	else
        -:  195:            	{
    #####:  196:					printf("\nPassword mismatch! Please try again.\n");	  /* Handle password mismatch */
    #####:  197:					attempts++;	  /* Increment attempts */
        -:  198:            	}
        -:  199:			}
        -:  200:			else
        -:  201:			{
    #####:  202:				printf("Maximum limit exceeded.\nTry again later.\n");	  /* Exit after 3 failed attempts */
    #####:  203:				exit(EXIT_FAILURE);
        -:  204:			}
        -:  205:        }
        -:  206:    }
        -:  207:}
        -:  208:
        -:  209:/****************************************************************************
        -:  210:*       Function Name   : login
        -:  211:*       Description     : Handles user login, validates user number and password, 
        -:  212:*                         and communicates with the server for authentication. 
        -:  213:*       Returns         : Nothing.
        -:  214:****************************************************************************/
        -:  215:
        1:  216:void login(int sock)
        -:  217:{
        1:  218:	int attempts=0; ;	/*For number of failed login attempts*/
        1:  219:	printf("\n=============== LOGIN PAGE ===============\n");
        1:  220:    printf("\nStart logging in\n");
        1:  221:    memset(buffer, 0, sizeof(buffer));
        -:  222:    while(1)
        -:  223:    {
        1:  224:		if(attempts<3)	  /* Allow up to 3 failed login attempts */
        -:  225:		{
        1:  226:			printf("Enter the number: ");
        1:  227:        	if(scanf("%ld", &phno) == 1)	/* Input phone number (user identification) */
        -:  228:        	{
        1:  229:            	getchar();
        -:  230:
        -:  231:				/* Validate if the phone number is a 10-digit long number */
        1:  232:            	if(phno >= 1000000000 && phno <= 9999999999)
        -:  233:            	{
        1:  234:                	send(sock, &phno, sizeof(phno), 0);	  /* Send phone number to the server */
        1:  235:                	break;	  /* Break the loop when phone number is valid */
        -:  236:            	}
        -:  237:            	else
        -:  238:            	{
    #####:  239:					attempts++;	  /* Increment attempts if the number is invalid */
    #####:  240:                	printf("\nEnter 10 digits\n");
        -:  241:            	}
        -:  242:        	}
        -:  243:        	else
        -:  244:        	{
    #####:  245:				attempts++;	 /* Increment attempts if input is not a valid long integer */
    #####:  246:            	printf("\nEnter only long integers\n");
    #####:  247:            	getchar();
        -:  248:        	}
        -:  249:		}
        -:  250:		else
        -:  251:		{
    #####:  252:			printf("Maximum limit exceeded.\nTry again later.\n");	 /* Exit after 3 failed attempts */
    #####:  253:			exit(EXIT_FAILURE);
        -:  254:		}
        -:  255:    }
        -:  256:
        -:  257:	/* Reset attempts counter after phone number is sent */
        1:  258:	attempts=0;
        1:  259:    recv(sock, buffer, sizeof(buffer), 0);	 /* Receive server's response */
        -:  260:
        -:  261:	/* Check if the user is not registered */
        1:  262:    if(strcmp(buffer, "User is not registered\n") == 0)
        -:  263:    {
    #####:  264:        regist(sock);	/* If user is not registered, call registration function */
    #####:  265:        return;
        -:  266:    }
        -:  267:
        -:  268:	/* Check if the server asks for the password */
        1:  269:    if(strcmp(buffer, "Enter password: ") == 0)
        -:  270:    {
        -:  271:        while(1)
        -:  272:        {
        1:  273:			if(attempts<3)	 /* Allow up to 3 failed password attempts */
        -:  274:			{
        1:  275:            	printf("%s", buffer);
        1:  276:            	fgets(password, MAXBUFF, stdin);
        1:  277:            	password[strlen(password)-1] = '\0';
        1:  278:            	send(sock, password, sizeof(password), 0);	 /* Send password to the server */
        1:  279:            	recv(sock, buffer, sizeof(buffer), 0);	 /* Receive response from server */
        -:  280:
        -:  281:				/* Check if login was successful */
        1:  282:            	if(strcmp(buffer, "Logged in successfully.\n") == 0)
        -:  283:            	{
        1:  284:                	break;	 /* Exit loop on successful login */
        -:  285:            	}	
        -:  286:           	 	else
        -:  287:            	{
    #####:  288:					attempts++;	 /* Increment attempts if password mismatch */
    #####:  289:					printf("\nPassword mismatch! Please re-enter.\n");
        -:  290:            	}
        -:  291:			}
        -:  292:			else
        -:  293:			{
    #####:  294:				printf("Maximum limit exceeded.\nTry again later.\n");	 /* Exit after 3 failed password attempts */
    #####:  295:				exit(EXIT_FAILURE);
        -:  296:			}
        -:  297:		}
        -:  298:    }
        -:  299:}
        -:  300:
        -:  301:/****************************************************************************
        -:  302:*       Function Name   : edit_menu
        -:  303:*       Description     : Displays and take choice as input, then sends the 
        -:  304:*						data to the server and handles user choices in the edit menu.
        -:  305:*       Returns         : Nothing.
        -:  306:****************************************************************************/
        -:  307:
        2:  308:void edit_menu(int sock)
        -:  309:{
        2:  310:    int option=0; /* User selected option*/
        -:  311:
        -:  312:	/* Display the edit menu for the user */
        2:  313:	printf("============ EDIT MENU ===============");
        2:  314:	printf("\n1. Forwarding details.\n2. Activate.\n3. Deactivate.\n4. Unregister.\n0. Exit\n");
        2:  315:    printf("Enter the choice: ");
        2:  316:    scanf("%d", &option);
        2:  317:    getchar();
        2:  318:    send(sock, &option, sizeof(option), 0);	  /* Send selected option to the server */
        -:  319:
        -:  320:	/* Handle different menu options based on user input */
        2:  321:    switch(option)
        -:  322:    {
        1:  323:        case 1:
        1:  324:            give_details(sock);	  /* Call function for forwarding details */
        1:  325:            break;
        1:  326:        case 2:
        1:  327:            break;	  /* Placeholder for activating */
    #####:  328:        case 3:
    #####:  329:            break;	  /* Placeholder for deactivating */
    #####:  330:        case 4:
    #####:  331:            break;	  /* Placeholder for unregistering */
    #####:  332:		case 0:
    #####:  333:			break;	  /* Exit the menu */
    #####:  334:		default:
    #####:  335:			printf("Entered invalid option.\n");	/* Handle invalid menu option */
    #####:  336:			break;
        -:  337:    }
        2:  338:}
        -:  339:
        -:  340:/****************************************************************************
        -:  341:*       Function Name   : give_details
        -:  342:*       Description     : Collects and validates client number and forwarding 
        -:  343:*                         type, then sends the data to the server.
        -:  344:*       Returns         : Nothing.
        -:  345:****************************************************************************/
        -:  346:
        1:  347:void give_details(int sock)
        -:  348:{
        1:  349:    long int rphno=0;/*stores requested client number*/
        -:  350:
        -:  351:    /*type_choice: stores the users choice for forwarding type
        -:  352:	attempts: Number of inavlid attempts*/
        1:  353:	int type_choice=0,attempts=0;
        -:  354:
        -:  355:    while(1)
        -:  356:    {
        1:  357:		if(attempts<3)	 /* Allow up to 3 failed attempts for entering requested client number */
        -:  358:		{
        1:  359:        	printf("Enter requested client number: ");
        1:  360:        	if(scanf("%ld", &rphno) == 1)	/* Read requested client phone number */
        -:  361:        	{
        1:  362:            	getchar();
        1:  363:            	if(rphno >= 1000000000 && rphno <= 9999999999)	 /* Validate phone number format */
        -:  364:            	{
        1:  365:                	send(sock, &rphno, sizeof(rphno), 0);	/* Send phone number to the server */
        1:  366:                	break;	 /* Break the loop when phone number is valid */
        -:  367:            	}
        -:  368:            	else
        -:  369:            	{
    #####:  370:					attempts++;	  /* Break the loop when phone number is valid */
    #####:  371:                	printf("\nEnter 10 digits\n");
        -:  372:            	}
        -:  373:        	}
        -:  374:        	else
        -:  375:        	{
    #####:  376:				attempts++;	  /* Increment attempts for non-numeric input */
    #####:  377:            	printf("\nEnter only long integers\n");
    #####:  378:            	getchar();
        -:  379:        	}
        -:  380:		}
        -:  381:		else
        -:  382:		{
    #####:  383:			printf("Maximum limit exceeded.\nTry again later.\n");	 /* Exit after 3 failed attempts */
    #####:  384:			exit(EXIT_FAILURE);
        -:  385:		}
        -:  386:    }
        -:  387:
        -:  388:	/* Display forwarding options */
        1:  389:    printf("\n##### Forwarding types #####\n");
        1:  390:    printf("1.Unconditional\n2.No reply\n3.Busy\n");
        1:  391:	attempts=0;	  /* Reset attempts for selecting forwarding type */
        -:  392:    while(1)
        -:  393:    {
        1:  394:		if(attempts<3)	  /* Allow up to 3 failed attempts for entering forwarding type */
        -:  395:		{
        1:  396:        	printf("\nEnter the choice: ");
        1:  397:        	scanf("%d", &type_choice);	  /* Read user's choice for forwarding type */
        -:  398:
        1:  399:        	if(type_choice < 4 && type_choice > 0)	  /* Validate forwarding type choice (1-3) */
        -:  400:        	{
        1:  401:            	send(sock, &type_choice, sizeof(type_choice), 0);	/* Send choice to the server */
        1:  402:            	break;	 /* Exit loop on valid input */
        -:  403:        	}
    #####:  404:			attempts++;	  /* Increment attempts for invalid input */
    #####:  405:        	printf("\nEnter between 1 to 3");
        -:  406:		}
        -:  407:		else
        -:  408:		{
    #####:  409:			printf("Maximum limit exceeded.\nTry again later.\n");	 /* Exit after 3 failed attempts */
    #####:  410:			break;
        -:  411:		}
        -:  412:    }
        1:  413:}
        -:  414:
        -:  415:/****************************************************************************
        -:  416:*       Function Name   : forward_call
        -:  417:*       Description     : Prompts for a client number, validates it, and 
        -:  418:*                         sends it to the server for call forwarding.
        -:  419:*       Returns         : Nothing.
        -:  420:****************************************************************************/
        -:  421:
    #####:  422:void forward_call(int sock)
        -:  423:{
    #####:  424:	int attempts=0;	  /*for number of invlaid input attempts*/
        -:  425:    while(1)
        -:  426:    {
    #####:  427:		if(attempts<3)	 /* Allow up to 3 failed attempts for entering requested client number */
        -:  428:		{
    #####:  429:        	printf("Enter requested client number: ");
    #####:  430:        	if(scanf("%ld", &phno) == 1)	/* Read requested client phone number */
        -:  431:        	{
    #####:  432:            	getchar();
    #####:  433:            	if(phno >= 1000000000 && phno <= 9999999999)	/* Validate phone number format */
        -:  434:            	{
    #####:  435:                	send(sock, &phno, sizeof(phno), 0);	  /* Send phone number to the server */
    #####:  436:                	break;	  /* Exit loop when phone number is valid */
        -:  437:            	}
        -:  438:            	else
        -:  439:            	{
    #####:  440:					attempts++;	  /* Increment attempts for invalid phone number */
    #####:  441:                	printf("\nEnter 10 digits\n");
        -:  442:            	}
        -:  443:        	}
        -:  444:        	else
        -:  445:        	{
    #####:  446:				attempts++;	  /* Increment attempts for non-numeric input */
    #####:  447:            	printf("\nEnter only long integers\n");
    #####:  448:            	getchar();
        -:  449:        	}
        -:  450:    	}
        -:  451:		else
        -:  452:		{
    #####:  453:			printf("Maximum limit exceeded.\nTry again later.\n");	 /* Exit after 3 failed attempts */
    #####:  454:			exit(EXIT_FAILURE);
        -:  455:		}
        -:  456:	}
    #####:  457:}
